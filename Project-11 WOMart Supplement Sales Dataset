select * from sales;
select * from "order";
select * from store;

copy public.sales from 'C:\download\course softwares\DATASETS\2\sales.csv' delimiter ',' csv header;
copy public."order" from 'C:\download\course softwares\DATASETS\2\order.csv' delimiter ',' csv header;
copy public.store from 'C:\download\course softwares\DATASETS\2\store.csv' delimiter ',' csv header;

select * from store where "ID" in ('T1193104','T1210593');
select * from store where "Store ID" between 200 and 300;
select * from store where "Store ID" not between 200 and 300;
select * from "order" where "Order No" between 10 and 20;
select * from store where "ID" like 'T12%';
select * from store where "ID" like '%345%';
select * from store where "ID" like '_____%';
select distinct "ID" from store where "ID" not like '%1567%';

select * from store where "Location Type"='L4' order by "Store ID";
select * from store where "Location Type"='L4' order by "Store ID" desc;
select * from store order by "Location Type" asc, "Store ID" desc;
select * from store order by 2;
select * from store order by "Store Type" desc;
select * from store where "Store ID">100 order by "Store ID" desc limit 10;
select * from store where "Store ID">100 order by "Store ID" asc limit 20;

select "ID" as "C_ID","Store Type" as "Store Category","Region Code" as "Region Category" from store;
select count(*) from store;
select count("Store ID")as "No of Stores",count("Order No") as "No of Orders" from "order" where "Location Type"='L3';
select sum("Sales") as "Total Sales" from sales;
select avg("Orders") as "Average Orders" from "order" ;
select sum("Orders") as "Total Orders" from "order" where "Store ID" = 160;
select min("Orders") as "Min Orders" from "order" where "Store ID" = 210;
select max("Orders") as "Max Orders" from "order" where "Store ID" = 145;

select * from sales;
select * from "order";
select * from store;

select "Store Type",count("ID") as "Total Customers" from "order" group by "Store Type";
select "Region Code",count("Store ID") as "Total Stores" from store group by "Region Code" order by "Total Stores" desc;
select "Store ID",min("Orders")as "Min Orders",max("Orders") as "Max Orders",sum("Orders") as "Total Orders" 
from "order" group by "Store ID" order by "Total Orders";
select "Store Type",count("Store ID") as "No of Stores" from store group by "Store Type" having count("Store ID")>200;
select * , case when "Orders"<100 then 'Low Orders' when "Orders" between 100 and 200 then 'Medium Orders'
else 'High Orders' end as "Order Category" from "order"; 

select a."Store ID",a."Store Type",a."Region Code",b."Location Type",b."Orders"
from store as a inner join "order" as b on a."Store ID"=b."Store ID" order by "Store ID";

select a."Store ID",a."Store Type",a."Region Code",b."Location Type",b."Orders"
from store as a left join "order" as b on a."Store ID"=b."Store ID" order by "Store ID";

select a."Store ID",a."Store Type",a."Region Code",b."Location Type",b."Orders"
from store as a right join "order" as b on a." Store ID"=b."Store ID" order by "Store ID";

select a."Store ID",a."Store Type",a."Region Code",b."Location Type",b."Orders"
from store as a full join "order" as b on a."Store ID"=b."Store ID" order by a."Store ID",b."Store ID";

select "ID" from store except select "ID" from "order" order by "ID";
select "ID" from store union select "ID" from "order" order by "ID";

select * from store where "Store ID" in (select "Store ID" from "order" where "Store ID">100);
select a."Store ID",a."Store Type",a."Region Code",b."Orders" from store as a left join
(select "Store ID" from "order" group by "Store ID") as b on a."Store ID"=b."Store ID";

select "Store ID","Store Type",(select "Date" from store where "order"."Store ID" = store."Store ID") from "order";
select "ID", length("ID") as characters from store;
select "Store ID"||'-'||"Store Type" as "Store" from store;

select "Store ID","Store Type",substring("Store Type" for 1) as "Store Group" from store
where substring("Store Type" for 1)='S';

select "Orders",'Total Orders are'||to_char("Orders",'99') as message from "order";
explain select * from store;
explain select distinct * from store;

create schema test;
create table test.store as select * from store;